{"uid":"7a7eadca367cc97b","name":"test_dynamic_steps","fullName":"tests.test_steps#test_dynamic_steps","historyId":"030d0f8c101a152ea8a3293a775caf95","time":{"start":1671470060670,"stop":1671470061441,"duration":771},"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x5628ca3352a3 <unknown>\n#1 0x5628ca0f3f77 <unknown>\n#2 0x5628ca11c5f7 <unknown>\n#3 0x5628ca1187d0 <unknown>\n#4 0x5628ca1590b7 <unknown>\n#5 0x5628ca158a5f <unknown>\n#6 0x5628ca150903 <unknown>\n#7 0x5628ca123ece <unknown>\n#8 0x5628ca124fde <unknown>\n#9 0x5628ca38563e <unknown>\n#10 0x5628ca388b79 <unknown>\n#11 0x5628ca36b89e <unknown>\n#12 0x5628ca389a83 <unknown>\n#13 0x5628ca35e505 <unknown>\n#14 0x5628ca3aaca8 <unknown>\n#15 0x5628ca3aae36 <unknown>\n#16 0x5628ca3c6333 <unknown>\n#17 0x7f6f072e0b43 <unknown>","statusTrace":"def test_dynamic_steps():\n        browser.config.window_height = 1920\n        browser.config.window_width = 1620\n        with allure.step(\"Открываем главную страницу\"):\n>           browser.open(\"https://github.com\")\n\ntests/test_steps.py:12: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/selene/support/shared/browser.py:68: in open\n    self.config.get_or_create_driver().set_window_size(\n/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/selene/support/shared/config.py:301: in get_or_create_driver\n    return self._source.get_or_create()\n/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/selene/support/shared/config.py:135: in get_or_create\n    return self.create()\n/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/selene/support/shared/config.py:116: in create\n    self._stored = self._set_driver()\n/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/selene/support/shared/config.py:203: in <lambda>\n    lambda: self._set_drivers_from_webdriver_manager()\n/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/selene/support/shared/config.py:277: in _set_drivers_from_webdriver_manager\n    return {\n/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/selene/support/shared/config.py:252: in get_chrome\n    return Chrome(\n/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/selenium/webdriver/chrome/webdriver.py:69: in __init__\n    super().__init__(DesiredCapabilities.CHROME['browserName'], \"goog\",\n/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/selenium/webdriver/chromium/webdriver.py:92: in __init__\n    super().__init__(\n/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:270: in __init__\n    self.start_session(capabilities, browser_profile)\n/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:363: in start_session\n    response = self.execute(Command.NEW_SESSION, parameters)\n/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:428: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f1c29e64110>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: Chrome failed to start: exited a...\\\\n#15 0x5628ca3aae36 \\\\u003Cunknown>\\\\n#16 0x5628ca3c6333 \\\\u003Cunknown>\\\\n#17 0x7f6f072e0b43 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get('methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"{}.{}\".format(frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\nE         (unknown error: DevToolsActivePort file doesn't exist)\nE         (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nE       Stacktrace:\nE       #0 0x5628ca3352a3 <unknown>\nE       #1 0x5628ca0f3f77 <unknown>\nE       #2 0x5628ca11c5f7 <unknown>\nE       #3 0x5628ca1187d0 <unknown>\nE       #4 0x5628ca1590b7 <unknown>\nE       #5 0x5628ca158a5f <unknown>\nE       #6 0x5628ca150903 <unknown>\nE       #7 0x5628ca123ece <unknown>\nE       #8 0x5628ca124fde <unknown>\nE       #9 0x5628ca38563e <unknown>\nE       #10 0x5628ca388b79 <unknown>\nE       #11 0x5628ca36b89e <unknown>\nE       #12 0x5628ca389a83 <unknown>\nE       #13 0x5628ca35e505 <unknown>\nE       #14 0x5628ca3aaca8 <unknown>\nE       #15 0x5628ca3aae36 <unknown>\nE       #16 0x5628ca3c6333 <unknown>\nE       #17 0x7f6f072e0b43 <unknown>\n\n/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:243: WebDriverException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x5628ca3352a3 <unknown>\n#1 0x5628ca0f3f77 <unknown>\n#2 0x5628ca11c5f7 <unknown>\n#3 0x5628ca1187d0 <unknown>\n#4 0x5628ca1590b7 <unknown>\n#5 0x5628ca158a5f <unknown>\n#6 0x5628ca150903 <unknown>\n#7 0x5628ca123ece <unknown>\n#8 0x5628ca124fde <unknown>\n#9 0x5628ca38563e <unknown>\n#10 0x5628ca388b79 <unknown>\n#11 0x5628ca36b89e <unknown>\n#12 0x5628ca389a83 <unknown>\n#13 0x5628ca35e505 <unknown>\n#14 0x5628ca3aaca8 <unknown>\n#15 0x5628ca3aae36 <unknown>\n#16 0x5628ca3c6333 <unknown>\n#17 0x7f6f072e0b43 <unknown>","statusTrace":"def test_dynamic_steps():\n        browser.config.window_height = 1920\n        browser.config.window_width = 1620\n        with allure.step(\"Открываем главную страницу\"):\n>           browser.open(\"https://github.com\")\n\ntests/test_steps.py:12: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/selene/support/shared/browser.py:68: in open\n    self.config.get_or_create_driver().set_window_size(\n/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/selene/support/shared/config.py:301: in get_or_create_driver\n    return self._source.get_or_create()\n/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/selene/support/shared/config.py:135: in get_or_create\n    return self.create()\n/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/selene/support/shared/config.py:116: in create\n    self._stored = self._set_driver()\n/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/selene/support/shared/config.py:203: in <lambda>\n    lambda: self._set_drivers_from_webdriver_manager()\n/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/selene/support/shared/config.py:277: in _set_drivers_from_webdriver_manager\n    return {\n/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/selene/support/shared/config.py:252: in get_chrome\n    return Chrome(\n/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/selenium/webdriver/chrome/webdriver.py:69: in __init__\n    super().__init__(DesiredCapabilities.CHROME['browserName'], \"goog\",\n/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/selenium/webdriver/chromium/webdriver.py:92: in __init__\n    super().__init__(\n/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:270: in __init__\n    self.start_session(capabilities, browser_profile)\n/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:363: in start_session\n    response = self.execute(Command.NEW_SESSION, parameters)\n/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:428: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f1c29e64110>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: Chrome failed to start: exited a...\\\\n#15 0x5628ca3aae36 \\\\u003Cunknown>\\\\n#16 0x5628ca3c6333 \\\\u003Cunknown>\\\\n#17 0x7f6f072e0b43 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get('methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"{}.{}\".format(frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\nE         (unknown error: DevToolsActivePort file doesn't exist)\nE         (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nE       Stacktrace:\nE       #0 0x5628ca3352a3 <unknown>\nE       #1 0x5628ca0f3f77 <unknown>\nE       #2 0x5628ca11c5f7 <unknown>\nE       #3 0x5628ca1187d0 <unknown>\nE       #4 0x5628ca1590b7 <unknown>\nE       #5 0x5628ca158a5f <unknown>\nE       #6 0x5628ca150903 <unknown>\nE       #7 0x5628ca123ece <unknown>\nE       #8 0x5628ca124fde <unknown>\nE       #9 0x5628ca38563e <unknown>\nE       #10 0x5628ca388b79 <unknown>\nE       #11 0x5628ca36b89e <unknown>\nE       #12 0x5628ca389a83 <unknown>\nE       #13 0x5628ca35e505 <unknown>\nE       #14 0x5628ca3aaca8 <unknown>\nE       #15 0x5628ca3aae36 <unknown>\nE       #16 0x5628ca3c6333 <unknown>\nE       #17 0x7f6f072e0b43 <unknown>\n\n/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:243: WebDriverException","steps":[{"name":"Открываем главную страницу","time":{"start":1671470060670,"stop":1671470061440,"duration":770},"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x5628ca3352a3 <unknown>\n#1 0x5628ca0f3f77 <unknown>\n#2 0x5628ca11c5f7 <unknown>\n#3 0x5628ca1187d0 <unknown>\n#4 0x5628ca1590b7 <unknown>\n#5 0x5628ca158a5f <unknown>\n#6 0x5628ca150903 <unknown>\n#7 0x5628ca123ece <unknown>\n#8 0x5628ca124fde <unknown>\n#9 0x5628ca38563e <unknown>\n#10 0x5628ca388b79 <unknown>\n#11 0x5628ca36b89e <unknown>\n#12 0x5628ca389a83 <unknown>\n#13 0x5628ca35e505 <unknown>\n#14 0x5628ca3aaca8 <unknown>\n#15 0x5628ca3aae36 <unknown>\n#16 0x5628ca3c6333 <unknown>\n#17 0x7f6f072e0b43 <unknown>\n\n","statusTrace":"  File \"/home/runner/work/python_allure_ci_github/python_allure_ci_github/tests/test_steps.py\", line 12, in test_dynamic_steps\n    browser.open(\"https://github.com\")\n  File \"/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/selene/support/shared/browser.py\", line 68, in open\n    self.config.get_or_create_driver().set_window_size(\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/selene/support/shared/config.py\", line 301, in get_or_create_driver\n    return self._source.get_or_create()\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/selene/support/shared/config.py\", line 135, in get_or_create\n    return self.create()\n           ^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/selene/support/shared/config.py\", line 116, in create\n    self._stored = self._set_driver()\n                   ^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/selene/support/shared/config.py\", line 203, in <lambda>\n    lambda: self._set_drivers_from_webdriver_manager()\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/selene/support/shared/config.py\", line 277, in _set_drivers_from_webdriver_manager\n    return {\n           ^\n  File \"/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/selene/support/shared/config.py\", line 252, in get_chrome\n    return Chrome(\n           ^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/selenium/webdriver/chrome/webdriver.py\", line 69, in __init__\n    super().__init__(DesiredCapabilities.CHROME['browserName'], \"goog\",\n  File \"/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/selenium/webdriver/chromium/webdriver.py\", line 92, in __init__\n    super().__init__(\n  File \"/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 270, in __init__\n    self.start_session(capabilities, browser_profile)\n  File \"/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 363, in start_session\n    response = self.execute(Command.NEW_SESSION, parameters)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 428, in execute\n    self.error_handler.check_response(response)\n  File \"/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py\", line 243, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[],"parameters":[],"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_steps"},{"name":"host","value":"fv-az627-56"},{"name":"thread","value":"2324-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_steps"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":0,"unknown":0,"total":2},"items":[{"uid":"672b388acc20314f","reportUrl":"https://tankisleva.github.io/python_allure_ci_github/1//#testresult/672b388acc20314f","status":"broken","statusDetails":"selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x5606e9c402a3 <unknown>\n#1 0x5606e99fef77 <unknown>\n#2 0x5606e9a275f7 <unknown>\n#3 0x5606e9a237d0 <unknown>\n#4 0x5606e9a640b7 <unknown>\n#5 0x5606e9a63a5f <unknown>\n#6 0x5606e9a5b903 <unknown>\n#7 0x5606e9a2eece <unknown>\n#8 0x5606e9a2ffde <unknown>\n#9 0x5606e9c9063e <unknown>\n#10 0x5606e9c93b79 <unknown>\n#11 0x5606e9c7689e <unknown>\n#12 0x5606e9c94a83 <unknown>\n#13 0x5606e9c69505 <unknown>\n#14 0x5606e9cb5ca8 <unknown>\n#15 0x5606e9cb5e36 <unknown>\n#16 0x5606e9cd1333 <unknown>\n#17 0x7f33f7fb0b43 <unknown>","time":{"start":1671436139199,"stop":1671436139977,"duration":778}}]},"tags":[]},"source":"7a7eadca367cc97b.json","parameterValues":[]}